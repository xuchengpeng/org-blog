#+TITLE: What is REST
#+DATE: <2019-12-02 Mon 23:03>

REST is acronym for REpresentational State Transfer. It is architectural style for *distributed hypermedia systems* and was first presented by Roy Fielding in 2000 in his famous [[https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm][dissertation]].

Like any other architectural style, REST also does have it's own [[https://restfulapi.net/rest-architectural-constraints/][6 guiding constraints]] which must be satisfied if an interface needs to be referred as *RESTful*. These principles are listed below.

** Guiding Principles of REST

1. *Client-server* - By separating the user interface concerns from the data
   storage concerns, we improve the portability of the user interface across
   multiple platforms and improve scalability by simplifying the server
   components.
2. *Stateless* - Each request from client to server must contain all of the
   information necessary to understand the request, and cannot take advantage of
   any stored context on the server. Session state is therefore kept entirely on
   the client.
3. *Cacheable* - Cache constraints require that the data within a response to a
   request be implicitly or explicitly labeled as cacheable or non-cacheable. If
   a response is cacheable, then a client cache is given the right to reuse that
   response data for later, equivalent requests.
4. *Uniform interface* - By applying the software engineering principle of
   generality to the component interface, the overall system architecture is
   simplified and the visibility of interactions is improved. In order to obtain
   a uniform interface, multiple architectural constraints are needed to guide
   the behavior of components. REST is defined by four interface constraints:
   identification of resources; manipulation of resources through
   representations; self-descriptive messages; and, hypermedia as the engine of
   application state.
5. *Layered system* - The layered system style allows an architecture to be
   composed of hierarchical layers by constraining component behavior such that
   each component cannot "see" beyond the immediate layer with
   which they are interacting.
6. *Code on demmand (optional)* - REST allows client functionality to be
   extended by downloading and executing code in the form of applets or scripts.
   This simplifies clients by reducing the number of features required to be
   pre-implemented.

** Resource

The key abstraction of information in REST is a *resource*. Any information that can be named can be a resource: a document or image, a temporal service, a collection of other resources, a non-virtual object (e.g. a person), and so on. REST uses a *resource identifier* to identify the particular resource involved in an interaction between components.

The state of resource at any particular timestamp is known as *resource
representation*. A representation consists of data, metadata describing the data
and *hypermedia* links which can help the clients in transition to next desired state.

The data format of a representation is known as a [[https://www.iana.org/assignments/media-types/media-types.xhtml][media type]]. The media type
identifies a specification that defines how a representation is to be processed.
*A truly RESTful API looks like hypertext*. Every addressable unit of information
carries an address, either explicitly (e.g., link and id attributes) or
implicitly (e.g., derived from the media type definition and representation
structure).

According to Roy Fielding:

#+BEGIN_QUOTE
Hypertext (or hypermedia) mean the simultaneous presentation of information
and controls such that the information becomes the affordance through which the
user (or automaton) obtains choices and selects actions. Remember that hypertext
does not need to be HTML (or XML or JSON) on a browser. Machines can follow
links when they understand the data format and relationship types.
#+END_QUOTE

Further, *resource representations shall be self-descriptive*: the client does not
need to know if a resource is employee or device. It should act on basis of
media-type associated with resource. So in practice, you will end up creating
lots of *custom media-types* - normally one media-type associated with one
resource.

#+BEGIN_QUOTE
Every media type defines a default processing model. For example, HTML defines a
rendering process for hypertext and the browser behavior around each element. It
has no relation to the resource methods GET/PUT/POST/DELETE/... other than the
fact that some media type elements will define a process model that goes like
"anchor elements with an href attribute create a hypertext link that, when
selected, invokes a retrieval request (GET) on the URI corresponding to the
CDATA-encoded href attribute."
#+END_QUOTE

** Resource Methods

Other important thing associated with REST is *resource methods* to be used to
perform the desired transition. A large number of people wrongly relate resource
methods to HTTP *GET/PUT/POST/DELETE* methods.

Roy Fielding has never mentioned any recommendation around which method to be
used in which condition. All he emphasizes is that it should be *uniform
interface*. If you decide HTTP POST will be used for updating a resource -
rather than most people recommend HTTP PUT - it's alright and application
interface will be RESTful.

Ideally, everything that is needed to change the resource state shall be part of
API response for that resource - including methods and in what state they will
leave the representation.

#+BEGIN_QUOTE
A REST API should be entered with no prior knowledge beyond the initial URI (bookmark) and set of standardized media types that are appropriate for the intended audience (i.e., expected to be understood by any client that might use the API). From that point on, all application state transitions must be driven by client selection of server-provided choices that are present in the received representations or implied by the user's manipulation of those representations. The transitions may be determined (or limited by) the client's knowledge of media types and resource communication mechanisms, both of which may be improved on-the-fly (e.g., code-on-demand).
[Failure here implies that out-of-band information is driving interaction
instead of hypertext.]
#+END_QUOTE

Another thing which will help you while building RESTful APIs is that 
*query based API results should be represented by a list of links with summary information*, 
not by arrays of original resource representations because query is not a substitute for identification of resources.

** REST and HTTP are not same !!

A lot of people prefer to compare HTTP with REST. *REST and HTTP are not same*.

Though, because REST also intend to make web (internet) more streamline and
standard, he advocate to use REST principles more strictly. And that's from
where people try to start comparing REST with web (HTTP). Roy fielding, in his
dissertation, nowhere mentioned any implementation directive - including any
protocol preference and HTTP. Till the time, you are honoring the 6 guiding
principles of REST, you can call your interface RESTful.

In simplest words, in the REST architectural style, data and functionality are
considered resources and are accessed using Uniform Resource Identifiers (URIs).
The resources are acted upon by using a set of simple, well-defined operations.
The clients and servers exchange representations of resources by using a
standardized interface and protocol - typically HTTP.

Resources are decoupled from their representation so that their content can be
accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG,
JSON, and others. Metadata about the resource is available and used, for
example, to control caching, detect transmission errors, negotiate the
appropriate representation format, and perform authentication or access
control.And most importantly, every interaction with a resource is stateless.

All these principles help RESTful applications to be simple, lightweight, and
fast.

References:

http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven
https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm

#+include: ../comments.inc
