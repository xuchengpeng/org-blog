#+TITLE: 在Emacs中使用大型语言模型
#+AUTHOR: Chuck
#+DATE: <2025-01-11 Sat 16:14>

Emacs有不少LLM的客户端，这里我们选择[[https://github.com/karthink/gptel][gptel]]，在 =init.el= 中添加以下代码：

#+begin_src emacs-lisp
  (use-package gptel
    :ensure t
    :commands (gptel gptel-send gptel-rewrite))
#+end_src

gptel支持很多大型语言模型，大多数需要设置API Key或者Token，为了避免这些信息泄露，可以在 =custom.el= 中进行设定，这里以[[https://gemini.google.com][Gemini]]和[[https://github.com/marketplace/models][Github Models]]为例。

#+begin_src emacs-lisp
  (with-eval-after-load 'gptel
    (gptel-make-openai "Github Models"
      :host "models.inference.ai.azure.com"
      :endpoint "/chat/completions?api-version=2024-05-01-preview"
      :stream t
      :key "your github token"
      :models '(gpt-4o gpt-4o-mini))
    (setq gptel-model 'gemini-1.5-flash
          gptel-backend (gptel-make-gemini "Gemini"
                          :key "your gemini key"
                          :stream nil)
          gptel-use-curl nil))
#+end_src

gptel的 ~:key~ 属性支持设置为一个函数来返回key，另外一种通过环境变量的实现方式：

#+begin_src emacs-lisp
  ;; in your custom.el
  (setenv "GPTEL_GEMINI_KEY" "your gemini key")

  ;; in your config.el
  (setq gptel-model 'gemini-1.5-flash
        gptel-backend (gptel-make-gemini "Gemini"
                        :key (lambda () (getenv "GPTEL_GEMINI_KEY"))
                        :stream nil)
        gptel-use-curl nil)
#+end_src

#+include: ../comments.inc
